var treeSize = 2000;
var body = document.getElementsByTagName("body")[0];
var width = body.scrollWidth, height = body.scrollHeight;
var centerX = width/2, centerY = height / 2;
var previousK = 0;

// create an svg element and add it to the body
var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height)
    .call(
      d3.zoom()
        .on("zoom", zoomed)
        .scaleExtent([0.2,2])
    ); //adds a listener for zoom events (e.g. scrolling the mouse wheel). also handles dragging

// create group elements in the svg for links and nodes
var svgNodeGroup = svg.append("g");
var svgLinkGroup = svg.append("g");

// create a d3 hierarchy from the data generated by generateRandomTree()
var root = d3.stratify()
    .id(function(d) { return d.name; }) //tells d3 where to find the id for each node
    .parentId(function(d) { return d.parent; }) //tells d3 where to find the id for each nodes parent node
    (generateRandomTree()); //passes the data to create the tree from

// create a new d3 tree
var tree = d3.tree()
    .separation( //defines how far nodes should be apart from each other
      function separation(a, b) {
        return (a.parent == b.parent ? 1 : 2) / a.depth;
      });

// tell the tree what data to use for it's nodes
tree(root);
calculateCoordinates();

// add all the nodes from the tree as circles to the svg node Group
svgNodeGroup.selectAll("circle")
    .data(root.descendants())
    .enter()
    .append("circle")
    .attr("r", function(d){ 
      return 10 - d.depth 
    })
    .attr("transform", function(d){
      return "translate(" + d.x + "," + d.y + ")"
    });

// add all the links from the tree as lines to the svg link group
svgLinkGroup.selectAll("line")
  .data(root.links())
  .enter()
  .append("line")
  .attr("x1", function(d){ return d.source.x})
  .attr("y1", function(d){ return d.source.y})
  .attr("x2", function(d){ return d.target.x})
  .attr("y2", function(d){ return d.target.y});

//---------------------------------------//
// Functions
//---------------------------------------//

  function generateRandomTree(){
  var nodes = [{"name" : "0", "parent": ""}];
  var currentNode = 0, currentNeighbor = 1, neighborCount;
  while(nodes.length < 200){
    neighborCount = 1 + Math.round(Math.random()*5);
    for (var i = 0; i < neighborCount; i++) {
      nodes.push({"name" : ""+currentNeighbor++, "parent" : currentNode});
    }
    currentNode++;
  }
  return nodes;
}

//calculates where to put each node using the layout d3 came up with as polar coordinates
function calculateCoordinates(){
  root.descendants().forEach(function(current){
    var x = current.x;
    var y = current.y;
    current.x = Math.cos(x*2*Math.PI) * y * treeSize + centerX,
    current.y = Math.sin(x*2*Math.PI) * y * treeSize + centerY;
  })
}

//updates all the nodes and links when a zoom event has occured (zoom events also happen when dragging the tree around)
function zoomed() {
  if (d3.event.transform.k != previousK) {
    //zoom behaviour
    svgNodeGroup.transition()
      .duration(150)
      .attr("transform", d3.event.transform);
    svgLinkGroup.transition()
      .duration(150)
      .attr("transform", d3.event.transform);
  } else {
    //drag behaviour
    svgNodeGroup.attr("transform", d3.event.transform);
    svgLinkGroup.attr("transform", d3.event.transform);
  }
  previousK = d3.event.transform.k;
}